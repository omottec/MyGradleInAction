class ProjectVersion7 {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion7(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion7(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }

    @Override
    String toString() {
        return "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion7 readVersion() {
    logger.quiet 'Reading the version file'

    if (!versionFile.exists())
        throw new GradleException("Required version file does not exist:$versionFile.canonicalPath")

    java.util.Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }
    new ProjectVersion7(versionProps.major.toInteger(),
        versionProps.minor.toInteger(),
        versionProps.release.toBoolean())
}

task printVersion << {
    println "Version: $version"
}

task makeReleaseVersion(group: 'versioning',
        description: 'Makes project a release version') {
    inputs.property('release', version.release)
    outputs.file versionFile

    doLast {
        version.release = true
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ReleaseVersionTask extends DefaultTask {
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning'
        description = 'Makes project a release version'
    }

    @TaskAction
    void start() {
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

task makeReleaseVersion1(type: ReleaseVersionTask) {
    release = version.release
    destFile = versionFile
}

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project " +
        "version classifier.") { String taskName ->
    if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) << {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()
            String currentVersion = version.toString()
            switch (classifier) {
                case 'major':
                    ++version.major
                    break
                case 'minor':
                    ++version.minor
                    break
                default:
                    throw new GradleException("Invalid version type $classifier. " +
                            "Allowed types: ['Major', 'Minor']")
            }
            String newVersion = version.toString()
            logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"
            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }
        }
    }
}