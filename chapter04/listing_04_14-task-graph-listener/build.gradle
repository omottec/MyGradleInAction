apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists())
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(),
            versionProps.minor.toInteger(),
            versionProps.release.toBoolean())
}

task createDistribution(type: Zip) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) {
    logger.quiet 'Releasing the project...'
}

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier") { String taskName ->
    if (!taskName.startsWith('increment') || !taskName.endsWith('Version')) return

    task(taskName) << {
        String classifier = (taskName - 'increment' - 'Version').toLowerCase()
        String oldVersion = version.toString()
        switch (classifier) {
            case 'major':
                ++version.major
                break
            case 'minor':
                ++version.minor
                break
            default:
                throw new GradleException("Invalid version type $classifier. Allowed types: ['Major', 'Minor']")
        }
        String newVersion = version.toString()
        logger.info "Incrementing $classifier project version: $oldVersion -> $newVersion"
        ant.propertyfile(file: versionFile) {
            entry(key: classifier, type: 'int', operation: '+', value: 1)
        }
    }
}

class ReleaseVersionListener implements TaskExecutionGraphListener {
    static final String releaseTaskPath = ':release'

    void graphPopulated(TaskExecutionGraph graph) {
        if (graph.hasTask(releaseTaskPath)) {
            List<Task> allTasks = graph.allTasks
            Task releaseTask = allTasks.find { it.path == releaseTaskPath }
            Project project = releaseTask.project
            if (!project.version.release) {
                project.version.release = true
                project.ant.propertyfile(file: project.versionFile) {
                    entry(key: 'release', type: 'string', operation: '=', value: 'true')
                }
            }
        }
    }
}

gradle.taskGraph.addTaskExecutionGraphListener(new ReleaseVersionListener())

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SANPSHOT'}"
    }
}